//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using HMI.Infrastructure.Interface;
using HMI.Presentation.Sirtap.Constants;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using System;
using System.Windows.Forms;

using HMI.Model.Module.BusinessEntities;
using HMI.Model.Module.Messages;
using HMI.Model.Module.Services;
using HMI.Model.Module.UI;
using HMI.Presentation.Sirtap.Properties;
using HMI.Presentation.Sirtap.UI;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.EventBroker;
using NLog;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Windows.Interop;
using Utilities;



namespace HMI.Presentation.Sirtap.Views
{
    [SmartPart]
    public partial class TlfView : UserControl
    {
        private IModelCmdManagerService _CmdManager = null;
        private StateManagerService _StateManager = null;
        private loginform dlg = null;
        private static Logger _Logger = LogManager.GetCurrentClassLogger();
        public TlfView([ServiceDependency] IModelCmdManagerService cmdManager, [ServiceDependency] StateManagerService stateManager)
        {
            _CmdManager = cmdManager;
            _StateManager = stateManager;
            InitializeComponent();
            _TlfNumbersWS.Name = WorkspaceNames.TlfNumbersWorkspace;
            _TlfFunctionsWS.Name = WorkspaceNames.TlfFunctionsWorkspace;

        }
        [EventSubscription(EventTopicNames.ActiveViewChanging, ThreadOption.Publisher)]
        public void OnActiveViewChanging(object sender, EventArgs<string> e)
        {

            if (e.Data == ViewNames.TlfIa)
            {
                _TlfPageBT.Enabled = false;
            }
            else if (e.Data == ViewNames.TlfDa)
            {
                _TlfPageBT.Enabled = true;
            }
        }

        //public TlfView()
        //{
        //    InitializeComponent();
        //    _TlfNumbersWS.Name = WorkspaceNames.TlfNumbersWorkspace;
        //    _TlfFunctionsWS.Name = WorkspaceNames.TlfFunctionsWorkspace;
        //}

        private void TlfView_BackColorChanged(object sender, EventArgs e)
        {
            Invalidate(true);
        }

        private void _TlfTLP_Paint(object sender, PaintEventArgs e)
        {
            if ((_StateManager.Tft.Login == false) || (_StateManager.Tft.Mision == ""))
                _StateManager.Tft.SetLogin(false);

        }

        private void _TlfPageBT_DownClick(object sender)
        {
            bool up = false;
            int numero_paginas_tlf = _StateManager.Tlf.GetNumDestinations() / 6+1;// Radio.GetNumberOfPagesRd();
            int actualPage = _TlfPageBT.Page;
            if (actualPage < numero_paginas_tlf-2)
                _TlfPageBT.Page = actualPage + 1;
            else
                _TlfPageBT.Page = 0;
            actualPage = _TlfPageBT.Page;
            _CmdManager.TlfLoadDaPage(actualPage);
        }

        private void _TlfPageBT_UpClick(object sender)
        {
            bool up = true;
            int numero_paginas_tlf = _StateManager.Tlf.GetNumDestinations() / 6+1;// Radio.GetNumberOfPagesRd();
            int actualPage = _TlfPageBT.Page;
            if (actualPage == 0)
                _TlfPageBT.Page = numero_paginas_tlf - 2;
            else
                _TlfPageBT.Page = actualPage - 1;
            actualPage = _TlfPageBT.Page;
            _CmdManager.TlfLoadDaPage(actualPage);

        }


        private void _TlfHeadPhonesUDB_LevelDown(object sender, EventArgs e)
        {
            int level = _TlfHeadPhonesUDB.Level - 1;

            try
            {
                _CmdManager.TlfSetHeadPhonesLevel(level);
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR subiendo el nivel del altavoz LC a " + level, ex);
            }

        }
        [EventSubscription(EventTopicNames.TlfHeadPhonesLevelChanged, ThreadOption.Publisher)]
        public void OnTlfHeadPhonesLevelChanged(object sender, EventArgs e)
        {
            _TlfHeadPhonesUDB.Level = _StateManager.TlfHeadPhones.Level;
        }

        private void _TlfHeadPhonesUDB_LevelUp(object sender, EventArgs e)
        {
            int level = _TlfHeadPhonesUDB.Level + 1;
            try
            {
                _CmdManager.TlfSetHeadPhonesLevel(level);
            }
            catch (Exception ex)
            {
                _Logger.Error("ERROR subiendo el nivel del altavoz LC a " + level, ex);
            }

        }


        private void hmiButtonlogin_Click(object sender, EventArgs e)
        {
            if (_StateManager.Tft.Login)
            {
                _StateManager.Tft.Login = false;
            }
            else
            {
                MostrarDialogoLogin();
            }
            if (_StateManager.Tft.Login)
            {
                hmiButtonLogin.Text = "LOGOUT";
                hmiButtonLogin.Update();
            }
            else
            {
                MostrarDialogoLogin();
                MostrarModo(sender);
            }
        }

        [EventSubscription(EventTopicNames.ActiveViewChanging, ThreadOption.Publisher)]
        [EventSubscription(EventTopicNames.MessageLogin, ThreadOption.Publisher)]
        public void OnMessageLogin(object sender, EventArgs e)
        {
            if (_StateManager.Tft.Login)
                hmiButtonLogin.Text = "LOGOUT";
        }
        public void MostrarDialogoLogin()
        {
            if (dlg==null) 
                dlg = new loginform();
            if (dlg.Visible)
                return;
            dlg.setuploginform(_CmdManager, _StateManager);
            DialogResult result = dlg.ShowDialog();
            
            //dlg.Show();

        }

        [EventSubscription(EventTopicNames.TftLoginChanged, ThreadOption.Publisher)]
        public void OnLoginChanged(object sender, EventArgs e)
        {
            MostrarModo(sender);
            if ((_StateManager.Tft.Login==false) || (_StateManager.Tft.Mision == ""))
                MostrarDialogoLogin();
        }
        private void ChangeColors()
        {
            if (_StateManager.Tft.ModoNocturno)
                BackColor = Color.Gray;
            else
                BackColor = Color.White;
        }
        private void MostrarModo(object sender)
        {
            ChangeColors();
        }


    }
}

