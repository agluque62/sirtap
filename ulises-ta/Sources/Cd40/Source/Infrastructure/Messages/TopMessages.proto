package U5ki.Infrastructure;
import "Common.proto";

message TopRs
{
}

message FrRxChangeAsk
{
	required string HostId = 1;
	required string Frecuency = 2;
	required bool Rx = 3;
}

message FrTxChangeAsk
{
	required string HostId = 1;
	required string Frecuency = 2;
	required bool Tx = 3;
	optional uint32 PttType = 4;
	optional bool CheckAlreadyAssigned = 5;
}

message FrTxAssigned
{
	required string Frecuency = 1;
	required string UserId = 2;
}

message PttChangeAsk
{
	required string HostId = 1;
	required PttSource Src = 2;
}

message RtxGroupChangeAsk
{
	enum ChangeType 
	{ 
		NoChanged = 0;
		Add = 1;
		Delete = 2;
	}
	
	required string HostId = 1;
	required uint32 GroupId = 2;
	repeated string FrIds = 3;
	repeated ChangeType Changes = 4;
}

message SelcalPrepareMsg
{
	required string HostId = 1;
	required bool OnOff = 2;
	required string Code = 3;
}

message SelcalPrepareRsp
{
	required bool resultado = 1;
	required string Frecuency = 2;
	required string mensaje = 3;
	required string Code = 4;
}

message ChangeSiteMsg
{
	required string HostId = 1;
	required string Frequency = 2;
	required string Alias = 3;
}

message ChangeSiteRsp
{
	required bool resultado = 1;
	required string Frecuency = 2;
	required string Alias = 3;
}

/*Mensaje desde HMI del puesto para solicitar cambio de frecuencia en un destino radio*/
message FrChangeAsk
{
	required string HostId = 1;
	required string IdFrecuency = 2;    //Corresponde al identificador unico que llamamos Literal
	required string NewFrecuency = 3;
}

/*Mensaje respuesta a FrChangeAsk*/
message FrChangeRsp
{
	required bool resultado = 1;
	required string IdFrecuency = 2;    //Corresponde al identificador unico que llamamos Literal
	required string AssignedFrecuency = 3;
	required uint32 Code = 4;
}

message ConferenceStatus
{
	enum ConfStatus
	{
		Ok = 0;
		Error = 1;
	}

	required string RoomName = 1;
	required ConfStatus Status = 2;  
	repeated string ActiveParticipants = 3;
}

message SirTapAudAlarmMsg
{
	enum EventType
	{
		Stop = 0;		//Finaliza la alarma
		Start = 1;		//Inicia la alarma
		Cancel = 2;		//Cancela la alarma
	}

	enum Category
	{
		Alert = 0;
		Alarm = 1;
	}

	required string identity = 1;
	required EventType eventtype = 2;
	required Category category = 3;
}

message TlmdoGetChannelsAskMsg			//TLMDO_GET_CHANNELS_ASK
{
	required string HostId = 1;
	required string IdFrecuency = 2;    //Corresponde al identificador unico que llamamos Literal
	required string IdRecurso = 3;		//Identificador del recurso. Si el mensaje se aplica a toda la frecuencia entonces es un string de longitud cero.
}

message TlmdoGetChannelsRspMsg			//TLMDO_GET_CHANNELS_RSP
{
	required bool resultado = 1;		//si false entonces no se ha podido ejecutar el comando
	required string IdFrecuency = 2;    //Corresponde al identificador unico que llamamos Literal
	required string IdRecurso = 3;		//Identificador del recurso. Si el mensaje se aplica a toda la frecuencia entonces es un string de longitud cero.
	repeated string Channels = 4;		//Lista con los canales
	required uint32 Code = 5;
}

message TlmdoSetChannelAskMsg			//TLMDO_SET_CHANNEL_ASK
{
	required string HostId = 1;
	required string IdFrecuency = 2;    //Corresponde al identificador unico que llamamos Literal
	required string IdRecurso = 3;		//Identificador del recurso. Si el mensaje se aplica a toda la frecuencia entonces es un string de longitud cero.
	required string Channel = 4;		//Canal solicitado
}

message TlmdoSetChannelRspMsg			//TLMDO_SET_CHANNEL_RSP
{
	required bool resultado = 1;		//si false entonces no se ha podido ejecutar el comando
	required string IdFrecuency = 2;    //Corresponde al identificador unico que llamamos Literal
	required string IdRecurso = 3;		//Identificador del recurso. Si el mensaje se aplica a toda la frecuencia entonces es un string de longitud cero.
	required string Channel = 4;		//Canal seleccionado
	required uint32 Code = 5;
}

message TlmdoSetTxPwrAskMsg				//TLMDO_SET_TXPWR_ASK
{
	required string HostId = 1;
	required string IdFrecuency = 2;    //Corresponde al identificador unico que llamamos Literal
	required string IdRecurso = 3;		//Identificador del recurso. Si el mensaje se aplica a toda la frecuencia entonces es un string de longitud cero.
	required string PowerW = 4;			//Potencia en watios. 0,25 a 50
}

message TlmdoSetTxPwrRspMsg				//TLMDO_SET_TXPWR_RSP
{
	required bool resultado = 1;		//si false entonces no se ha podido ejecutar el comando
	required string IdFrecuency = 2;    //Corresponde al identificador unico que llamamos Literal
	required string IdRecurso = 3;		//Identificador del recurso. Si el mensaje se aplica a toda la frecuencia entonces es un string de longitud cero.
	required string PowerW = 4;			//Potencia seleccionada
	required uint32 Code = 5;
}

message TlmdoSetTxInhibitAskMsg			//TLMDO_SET_TXINHIBIT_ASK
{
	required string HostId = 1;
	required string IdFrecuency = 2;    //Corresponde al identificador unico que llamamos Literal
	required string IdRecurso = 3;		//Identificador del recurso. Si el mensaje se aplica a toda la frecuencia entonces es un string de longitud cero.
	required bool Inhibit = 4;			//Si true se inhibe la transmision
}

message TlmdoSetTxInhibitRspMsg			//TLMDO_SET_TXINHIBIT_RSP
{
	required bool resultado = 1;		//si false entonces no se ha podido ejecutar el comando
	required string IdFrecuency = 2;    //Corresponde al identificador unico que llamamos Literal
	required string IdRecurso = 3;		//Identificador del recurso. Si el mensaje se aplica a toda la frecuencia entonces es un string de longitud cero.
	required bool Inhibit = 4;			//Si true la transmision esta inhibida
	required uint32 Code = 5;
}

message TlmdoSetWFallocAskMsg			//TLMDO_SET_WFALLOC_ASK
{
	required string HostId = 1;
	required string IdFrecuency = 2;    //Corresponde al identificador unico que llamamos Literal
	required string IdRecurso = 3;		//Identificador del recurso. Si el mensaje se aplica a toda la frecuencia entonces es un string de longitud cero.
	required bool SQH = 4;				//Si true se fuerza SQH
}

message TlmdoSetWFallocRspMsg			//TLMDO_SET_WFALLOC_RSP
{
	required bool resultado = 1;		//si false entonces no se ha podido ejecutar el comando
	required string IdFrecuency = 2;    //Corresponde al identificador unico que llamamos Literal
	required string IdRecurso = 3;		//Identificador del recurso. Si el mensaje se aplica a toda la frecuencia entonces es un string de longitud cero.
	required bool SQH = 4;				//Retorna el estado de SQH forzado
	required uint32 Code = 5;
}

message TlmdoSetCryptKeyAskMsg			//TLMDO_SET_CRYPT_KEYS_ASK
{
	enum KeyTypes
	{
		Delete = 0;			//Borrar las claves CRIPTO almacenadas
		ExternalDev = 1;	//Carga las claves desde un dispositivo externo
	}

	required string HostId = 1;
	required string IdFrecuency = 2;    //Corresponde al identificador unico que llamamos Literal
	required string IdRecurso = 3;		//Identificador del recurso. Si el mensaje se aplica a toda la frecuencia entonces es un string de longitud cero.
	required KeyTypes Keytipe = 4;				//Si true se fuerza SQH
}

message TlmdoSetCryptKeyRspMsg			//TLMDO_SET_CRYPT_KEYS_RSP
{
	required bool resultado = 1;		//si false entonces no se ha podido ejecutar el comando
	required string IdFrecuency = 2;    //Corresponde al identificador unico que llamamos Literal
	required string IdRecurso = 3;		//Identificador del recurso. Si el mensaje se aplica a toda la frecuencia entonces es un string de longitud cero.
	required TlmdoSetCryptKeyAskMsg.KeyTypes Keytipe = 4;			
	required uint32 Code = 5;
}



