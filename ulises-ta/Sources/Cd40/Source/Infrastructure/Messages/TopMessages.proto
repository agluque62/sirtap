package U5ki.Infrastructure;
import "Common.proto";

message TopRs
{
}

message FrRxChangeAsk
{
	required string HostId = 1;
	required string Frecuency = 2;
	required bool Rx = 3;
}

message FrTxChangeAsk
{
	required string HostId = 1;
	required string Frecuency = 2;
	required bool Tx = 3;
	optional uint32 PttType = 4;
	optional bool CheckAlreadyAssigned = 5;
}

message FrTxAssigned
{
	required string Frecuency = 1;
	required string UserId = 2;
}

message PttChangeAsk
{
	required string HostId = 1;
	required PttSource Src = 2;
}

message RtxGroupChangeAsk
{
	enum ChangeType 
	{ 
		NoChanged = 0;
		Add = 1;
		Delete = 2;
	}
	
	required string HostId = 1;
	required uint32 GroupId = 2;
	repeated string FrIds = 3;
	repeated ChangeType Changes = 4;
}

message SelcalPrepareMsg
{
	required string HostId = 1;
	required bool OnOff = 2;
	required string Code = 3;
}

message SelcalPrepareRsp
{
	required bool resultado = 1;
	required string Frecuency = 2;
	required string mensaje = 3;
	required string Code = 4;
}

message ChangeSiteMsg
{
	required string HostId = 1;
	required string Frequency = 2;
	required string Alias = 3;
}

message ChangeSiteRsp
{
	required bool resultado = 1;
	required string Frecuency = 2;
	required string Alias = 3;
}

/*Mensaje desde HMI del puesto para solicitar cambio de frecuencia en un destino radio*/
message FrChangeAsk
{
	required string HostId = 1;
	required string IdFrecuency = 2;    //Corresponde al identificador unico que llamamos Literal
	required string NewFrecuency = 3;
}

/*Mensaje respuesta a FrChangeAsk*/
message FrChangeRsp
{
	required bool resultado = 1;
	required string IdFrecuency = 2;    //Corresponde al identificador unico que llamamos Literal
	required string AssignedFrecuency = 3;
	required uint32 Code = 4;
}

message ConferenceStatus
{
	enum ConfStatus
	{
		Ok = 0;
		Error = 1;
	}

	required string RoomName = 1;
	required ConfStatus Status = 2;  
	repeated string ActiveParticipants = 3;
}

message SirTapAudAlarmMsg
{
	enum EventType
	{
		Stop = 0;		//Finaliza la alarma
		Start = 1;		//Inicia la alarma
		Cancel = 2;		//Cancela la alarma
	}

	enum Category
	{
		Alert = 0;
		Alarm = 1;
	}

	required string identity = 1;
	required EventType eventtype = 2;
	required Category category = 3;
}

message TlmdoAsk
{
	enum MsgType
	{
		TLMDO_GET_CHANNELS = 1;		//Pide numero de canales de la radio
        TLMDO_SET_CHANNEL = 2;		//Seleccion del canal de radio
		TLMDO_SET_FREQUENCY = 3;	//Selecciona la frecuencia del canal
        TLMDO_SET_TXPWR = 4;		//Potencia de transmision
        TLMDO_SET_TXINHIBIT = 5;	//Inhibicion de TX
        TLMDO_SET_WFALLOC = 6;		//Waveform allocation. TBD
        TLMDO_ERASE_CRYPT_KEYS = 7;	//Borra claves de encriptacion
		TLMDO_LOAD_CRYPT_KEYS = 8;	//Carga claves de encriptacion
	}

	required MsgType msgType = 1;
	required string HostId = 2;
	required string IdFrecuency = 3;    //Corresponde al identificador unico que llamamos Literal
	required string IdRecurso = 4;		//Identificador del recurso. Si el mensaje se aplica a toda la frecuencia entonces es un string de longitud cero.
	optional int32 Channel = 5;			//Valor 0-9. Canal seleccionado en el caso del mensaje TLMDO_SET_CHANNEL, 
	optional string Frequency = 6;		//Frecuencia a la que se configura el canal. Mensaje TLMDO_SET_FREQUENCY. En el mensaje hay que especificar el Channel
	optional string PowerW = 7;			//Potencia en watios del canal. 0.25 a 50. Mensaje TLMDO_SET_TXPWR. En el mensaje hay que especificar el Channel.
	optional bool TxInhibit = 8;		//Si true se inhibe la transmision al transmisor independientemente del canal. Mensaje TLMDO_SET_TXINHIBIT. 
	optional string WF = 9;				//Mensaje TLMDO_SET_WFALLOC. En el mensaje hay que especificar el Channel.
}

message TlmdoRsp
{
	enum CodeTypes
	{
		// Codigos de retorno del campo code del mensaje de respuesta
        TLMDO_CODE_OK = 0;					//Ejecutado con exito
		TLMDO_CODE_INVALID_OP = 1;			//Operacion no soportada
        TLMDO_CODE_ERROR = 2;				//No se ha podido ejecutar
        TLMDO_CODE_NO_RESP = 3;				//La radio no responde
		TLMDO_CODE_OTHER_IN_PROGRESS = 4;   //Otra operacion de telemando esta en progreso
	}

	required TlmdoAsk.MsgType msgType = 1;
	required bool resultado = 2;				//si false entonces no se ha podido ejecutar el comando
	required string IdFrecuency = 3;			//Corresponde al identificador unico que llamamos Literal
	required string IdRecurso = 4;				//Identificador del recurso. Si el mensaje se aplica a toda la frecuencia entonces es un string de longitud cero.
	optional int32 NumChannels = 5;				//Numero de canales de la radio. Mensaje TLMDO_GET_CHANNELS.
	optional CodeTypes Code = 6;
}

