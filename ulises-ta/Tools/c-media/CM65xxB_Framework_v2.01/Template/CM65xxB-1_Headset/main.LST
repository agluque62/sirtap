C51 COMPILER V9.02   MAIN                                                                  03/27/2015 10:38:53 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\output\main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c OMF2 OPTIMIZE(9,SIZE) BROWSE INCDIR(..\..\CM65xxB-1\inc;.\inc) DEBUG
                    - OBJECT(.\output\main.obj)

line level    source

   1          //#define ALLOCATE_EXTERN
   2          
   3          #include <intrins.h>
   4          #include "types.h"
   5          #include "registers.h"
   6          #include "cm65xx.h"
   7          #include "audio.h"
   8          #include "usb.h"
   9          
  10          /*********************************************************************
  11          * External library variable declaration
  12          *********************************************************************/
  13          extern BOOL g_bmUsbPuReset;
  14          
  15          extern volatile BYTE xdata I2CM_DEV_ADDR;
  16          extern volatile BYTE xdata I2CM_MAP_ADDR[2];
  17          extern volatile BYTE xdata I2CM_DATA_BUF[16];
  18          extern volatile BYTE xdata I2CM_DATA_LEN;
  19          extern volatile BYTE xdata I2CM_16BIT_MODE;
  20          
  21          /*********************************************************************
  22          * External library function
  23          *********************************************************************/
  24          extern BYTE InternSpiReadByte(BYTE addr);
  25          
  26          extern void RefreshWdt();
  27          extern void POR_Init();
  28          extern void GPIO_Init(WORD dir_mask, WORD int_en, BOOL remote_wakeup_en);
  29          extern void LED_Config(BYTE led1, BYTE led2, BYTE led3);
  30          extern void LED1_Switch(BOOL open);
  31          extern void UartBaudRateInit();
  32          extern void HubInSuspend();
  33          extern void InternSpiWriteByte(BYTE addr, BYTE value);
  34          extern void AntiPopProcedure();
  35          extern void AdcCodecReset(BOOL ext_i2s, BOOL slv, BOOL mclk_out, BOOL dsp_mode);
  36          extern void DacCodecReset(BOOL ext_i2s, BOOL slv, BOOL mclk_out, BOOL dsp_mode);
  37          extern void PDSW_Control(BOOL en);
  38          extern void GpioPuPdSetting(WORD dir_mask, BOOL r_type);
  39          extern void MemZero(BYTE *dest, BYTE size);
  40          
  41          /*********************************************************************
  42          * Global/External variable definition
  43          *********************************************************************/
  44          // variables inside ROM
  45          BYTE g_bExtIntEnable    _at_ 0x0067;
  46          /*
  47          2:ext int1 ISR enable
  48          1:ext timer0 ISR enable
  49          0:ext int0 ISR enable
  50          */
  51          
  52          BOOL g_bmRemoteWakeupEn;
  53          BOOL g_bmSpdifOutEn;
  54          BOOL g_bmSelfPower;
C51 COMPILER V9.02   MAIN                                                                  03/27/2015 10:38:53 PAGE 2   

  55          BOOL g_bmAdcHPSEn;
  56          
  57          volatile BOOL g_bmUsbResume;
  58          volatile BOOL g_bmGpiRequest;
  59          
  60          BYTE g_bTemp, g_bTempA, g_bTempB, g_bIndex, g_bIndex2;
  61          BYTE g_bConfiguration, g_bTimer1Count;
  62          BYTE g_bDataBuffer[MAX_BUFFER_SIZE];
  63          
  64          BYTE idata g_bRecordMuteGpio;
  65          
  66          BYTE code *g_pbConfigDscr;
  67          BYTE code *g_pHidDscr;
  68          BYTE code *g_pHidReportDscr;
  69          BYTE code *g_pProductStringDscr;
  70          
  71          volatile BYTE xdata *g_pbXdataStart;
  72          
  73          WORD g_wTemp, g_wTempA;
  74          WORD g_wGpioIntMask, g_wGpioDirMask;
  75          WORD g_wOldGpiData;
  76          
  77          volatile WORD g_wGpiData;
  78          
  79          AUDIO_CONTROL_STRUCT code       *g_pAudioControl;
  80          CONVERTIBLE_CONTROL_TABLE_STRUCT code *g_pControlTable;
  81          
  82          extern BYTE g_bCurrentSelector, g_bCurrentMute, g_bAttribute;
  83          extern BYTE i_timercount;
  84          extern BYTE idata g_bHidInRegsInfo;
  85          extern BYTE idata g_bInputReport[MAX_HID_REPORT_SIZE];
  86          extern BYTE idata g_bCurrentVolume[MAX_FEATURE_VOL_NUM][2];
  87          extern BYTE idata g_bMinVolume[MAX_FEATURE_VOL_NUM];
  88          extern BYTE idata g_bAlternateSetting[4];
  89          
  90          extern CONVERTIBLE_CONTROL_TABLE_STRUCT code g_OriginControlTable1;
  91          extern USB_CONTROL_STATE g_UsbCtrlState;
  92          
  93          extern BYTE code T1_ConfigDscr, T1_HidDscr, Tx_HidReportDscr, ProductStringDscr;
  94          extern BYTE code g_bFeatureVolumeTbl[MAX_FEATURE_VOL_NUM * 2];
  95          
  96          /*********************************************************************
  97          * Global/External function definition
  98          *********************************************************************/
  99          extern void PeriIntInit();
 100          extern void SubmitUsbIntTransfer();
 101          extern void HandleUsbCtrlTransfer();
 102          extern void HandleUsbIntTransfer();
 103          
 104          /*********************************************************************
 105          * code area
 106          *********************************************************************/
 107          void Timer1Config()
 108          {
 109   1          // based on MCU CLK=12MHz, the counter should be 10000 for 10ms. 
 110   1          g_wTemp = (0 - 10000);
 111   1          TH1 = MSB(g_wTemp);
 112   1          TL1 = LSB(g_wTemp);   
 113   1      
 114   1          TR1 = 1;
 115   1      }
 116          
C51 COMPILER V9.02   MAIN                                                                  03/27/2015 10:38:53 PAGE 3   

 117          void InputReportDataReady()
 118          {
 119   1              g_bInputReport[0] = HID_REPORT_ID_GENEGRIC;
 120   1                      
 121   1              for(g_bIndex = 6; g_bIndex < MAX_HID_REPORT_SIZE; ++g_bIndex)
 122   1                      g_bInputReport[g_bIndex] = 0;
 123   1      
 124   1              g_pbXdataStart = (BYTE xdata *)((WORD)((CTRL_REG_H_ADDR << 8) | CTRL_REG_L_ADDR));
 125   1              g_bInputReport[3] = CTRL_REG_H_ADDR;
 126   1              g_bInputReport[4] = CTRL_REG_L_ADDR;                            
 127   1              for(g_bIndex = 0; g_bIndex < MIN(g_bHidInRegsInfo, (MAX_HID_REPORT_SIZE - 6)); ++g_bIndex)
 128   1              {
 129   2                      g_bInputReport[6 + g_bIndex] = g_pbXdataStart[g_bIndex];
 130   2              }
 131   1      }
 132          
 133          void HandlePeriHidReport(BYTE peri_type)
 134          {
 135   1              InputReportDataReady();
 136   1              g_bInputReport[5] |= peri_type;
 137   1              SubmitUsbIntTransfer();                          
 138   1              g_bInputReport[5] &= ~peri_type;
 139   1      }
 140          
 141          void PeriClkReset()
 142          {
 143   1              // play and record clk ungated
 144   1              MOD_CLK_CTRL[0] &= ~(bmBIT5 | bmBIT4);
 145   1              
 146   1              if(g_bmSpdifOutEn == FALSE)
 147   1                      MOD_CLK_CTRL[0] |= bmBIT3;
 148   1      
 149   1              // SPDIF_IN/IR clk gated
 150   1              MOD_CLK_CTRL[0] |= (bmBIT2 | bmBIT1);
 151   1              // I2C_slave adn ext. SPI clk gated
 152   1              MOD_CLK_CTRL[1] |= (bmBIT2 | bmBIT0);
 153   1      }
 154          
 155          void OriginInitialize()
 156          {
 157   1              g_wGpioDirMask = 0xFD8F;                // 1 is for input
 158   1              g_wGpioIntMask = 0xFD8F;                // for GPI interrupt enable
 159   1              GPIO_Init(g_wGpioDirMask, g_wGpioIntMask, g_bmRemoteWakeupEn);
 160   1              g_wGpioIntMask &= g_wGpioDirMask;
 161   1              g_bRecordMuteGpio = DEFAULT_GPIO_RECORD_MUTE;
 162   1              
 163   1              LED_Config(4, 5, 6);
 164   1              LED1_Switch(TRUE);
 165   1      
 166   1              #ifdef _UART_
                      UartBaudRateInit();
                      #endif
 169   1              
 170   1              g_bTimer1Count = 0;
 171   1              Timer1Config();
 172   1              
 173   1              PeriIntInit();
 174   1      
 175   1              //clk gated/un-gated for power saving
 176   1              PeriClkReset();
 177   1      }
 178          
C51 COMPILER V9.02   MAIN                                                                  03/27/2015 10:38:53 PAGE 4   

 179          void OriginReset()
 180          {
 181   1      }
 182          
 183          void OriginConfig()
 184          {
 185   1              PDSW_Control(TRUE);
 186   1      }
 187          
 188          void OriginEvent()
 189          {
 190   1      }
 191          
 192          void OriginGpi()
 193          {
 194   1              g_wTempA = (g_wGpiData ^ g_wOldGpiData) & g_wGpioIntMask;
 195   1              for(g_bIndex2 = 0; g_bIndex2 < 16; g_bIndex2++)
 196   1              {                       
 197   2                      g_wTemp = ((WORD)bmBIT0) << g_bIndex2;
 198   2                      if(g_wTempA & g_wTemp)
 199   2                      {
 200   3                              if(g_wGpiData & g_wTemp)
 201   3                              {       
 202   4                                      g_wOldGpiData |= g_wTemp;       
 203   4                                                                      
 204   4                                      if(g_bIndex2 < 8)
 205   4                                      {                               
 206   5                                              g_bInputReport[1] &= ~(LSB(g_wTemp));   
 207   5                                      }
 208   4                                      else
 209   4                                      {
 210   5                                              g_bInputReport[2] &= ~(MSB(g_wTemp));   
 211   5                                      }
 212   4                              }
 213   3                              else
 214   3                              {
 215   4                                      g_wOldGpiData &= ~g_wTemp;      
 216   4                                                                                              
 217   4                                      if(g_bIndex2 < 8)
 218   4                                      {                               
 219   5                                              g_bInputReport[1] |= (LSB(g_wTemp));    
 220   5                                      }
 221   4                                      else
 222   4                                      {
 223   5                                              g_bInputReport[2] |= (MSB(g_wTemp));    
 224   5                                      }                                               
 225   4                                      
 226   4                                      if(g_bIndex2 == g_bRecordMuteGpio)
 227   4                                      {
 228   5                                              g_pAudioControl->recordMute();
 229   5                                      }                                                                                                               
 230   4                              }       
 231   3                              
 232   3                              // issue a HID report to the host
 233   3                              HandlePeriHidReport(HID_INPUT_REPORT_INT_GPIO);
 234   3      
 235   3                              break;                          
 236   3                      }
 237   2              }
 238   1              
 239   1              if(g_bIndex2 == 16)
 240   1              {
C51 COMPILER V9.02   MAIN                                                                  03/27/2015 10:38:53 PAGE 5   

 241   2                      g_bmGpiRequest = FALSE;                 
 242   2              }               
 243   1      }
 244          
 245          void OriginIr()
 246          {
 247   1              HandlePeriHidReport(HID_INPUT_REPORT_INT_IR);
 248   1      }
 249          
 250          void variablesInit()
 251          {
 252   1              g_bmRemoteWakeupEn = FALSE;
 253   1              g_bmSelfPower = FALSE;
 254   1              g_bmAdcHPSEn = TRUE;
 255   1              g_bmSpdifOutEn = TRUE;
 256   1              
 257   1              g_bCurrentSelector = SELECTOR_MIC;
 258   1      
 259   1              g_pControlTable = &g_OriginControlTable1;
 260   1              g_pAudioControl = g_pControlTable->pAudioControl;
 261   1              
 262   1              g_pbConfigDscr = &T1_ConfigDscr;
 263   1              g_pHidDscr = &T1_HidDscr;
 264   1              g_pHidReportDscr = &Tx_HidReportDscr;
 265   1              g_pProductStringDscr = &ProductStringDscr;
 266   1      }
 267          
 268          void PowerOnReset()
 269          {
 270   1              // start the watchdog timer and refresh it.
 271   1              RefreshWdt();
 272   1      
 273   1              g_bExtIntEnable = (EX_INT1_EN | EX_TIMER0_EN | EX_INT0_EN);
 274   1              
 275   1              POR_Init();
 276   1              
 277   1              variablesInit();
 278   1              
 279   1              g_pControlTable->initialize();
 280   1              
 281   1              g_bmUsbPuReset = FALSE;
 282   1              g_bmUsbResume = FALSE;
 283   1              i_timercount = 0;
 284   1              EA = 1;
 285   1              TR0 = 1;
 286   1      }       
 287          
 288          void AnaCodecPowerReset()
 289          {
 290   1              g_bTemp = InternSpiReadByte(ANALOG_CODEC_CTRL_9);
 291   1              
 292   1              /*
 293   1                      bit5:AA-path enable
 294   1                      bit4:DAC enable
 295   1                      bit2:ADC enable
 296   1              */
 297   1              g_bTemp = (g_bTemp & ~bmBIT5) | (bmBIT4 | bmBIT2);
 298   1              InternSpiWriteByte(ANALOG_CODEC_CTRL_9, g_bTemp);
 299   1      }
 300          
 301          void usbEpReset()
 302          {
C51 COMPILER V9.02   MAIN                                                                  03/27/2015 10:38:53 PAGE 6   

 303   1              UsbResetAllEp();
 304   1                      
 305   1              UsbSelectEp(ENDPOINT_CTRL);
 306   1              USB_EP_CTRL_X = bmBIT7;
 307   1              
 308   1              UsbSelectEp(ENDPOINT_ISO_OUT);
 309   1              USB_EP_CTRL_X = bmBIT7;         
 310   1      
 311   1              UsbSelectEp(ENDPOINT_ISO_IN);
 312   1              USB_EP_CTRL_X = bmBIT7;
 313   1      
 314   1              UsbSelectEp(ENDPOINT_INT);
 315   1              USB_EP_CTRL_X = bmBIT7;
 316   1      }
 317          
 318          void CodecReset()
 319          {
 320   1              if(g_bmAdcHPSEn == FALSE)
 321   1              {
 322   2                      InternSpiWriteByte(DIGITAL_CODEC_CTRL_0, 
 323   2                                      InternSpiReadByte(DIGITAL_CODEC_CTRL_0) & ~bmBIT6);                     
 324   2              }
 325   1      
 326   1              // CLAMP=0, QA=0
 327   1              InternSpiWriteByte(ANALOG_CODEC_CTRL_D, 
 328   1                      InternSpiReadByte(ANALOG_CODEC_CTRL_D) & ~(bmBIT4 | bmBIT2));
 329   1      
 330   1              // set IREF_TEST
 331   1              InternSpiWriteByte(ANALOG_CODEC_CTRL_10, 0x06);
 332   1              
 333   1              AdcCodecReset(FALSE, FALSE, FALSE, FALSE);
 334   1              DacCodecReset(FALSE, FALSE, FALSE, FALSE);
 335   1      
 336   1              // set mic as a recording source
 337   1              InternSpiWriteByte(ANALOG_CODEC_CTRL_A, 
 338   1                      (InternSpiReadByte(ANALOG_CODEC_CTRL_A) |bmBIT7) & ~bmBIT6);    
 339   1      }       
 340          
 341          void volumeReset()
 342          {
 343   1              MemZero((BYTE *)g_bCurrentVolume, MAX_FEATURE_VOL_NUM * 2);
 344   1              
 345   1              g_bCurrentVolume[FEATURE_DAC][0] = 0xF6;        //-10dB
 346   1              g_bCurrentVolume[FEATURE_DAC][1] = 0xF6;
 347   1              g_bCurrentVolume[FEATURE_ADC_MIC][0] = 0x14;    //20dB
 348   1              g_bCurrentVolume[FEATURE_ADC_MIC][1] = 0x14;
 349   1      
 350   1              g_bMinVolume[FEATURE_DAC] = g_bFeatureVolumeTbl[(2 * FEATURE_DAC) + 1];
 351   1              g_bMinVolume[FEATURE_ADC_MIC] = g_bFeatureVolumeTbl[(2 * FEATURE_ADC_MIC) + 1];
 352   1                              
 353   1              g_bCurrentMute = 0;
 354   1      
 355   1              // update playback gain/mute registers
 356   1              g_bAttribute = FEATURE_DAC;
 357   1              g_pAudioControl->featureMute();
 358   1              g_pAudioControl->featureVolume();
 359   1              g_bAttribute = bmBIT4 | FEATURE_DAC;
 360   1              g_pAudioControl->featureVolume();
 361   1              
 362   1              // update record gain/mute registers
 363   1              g_bAttribute = FEATURE_ADC_MIC;
 364   1              g_pAudioControl->featureMute();
C51 COMPILER V9.02   MAIN                                                                  03/27/2015 10:38:53 PAGE 7   

 365   1              g_pAudioControl->featureVolume();
 366   1              g_bAttribute = bmBIT4 | FEATURE_ADC_MIC;
 367   1              g_pAudioControl->featureVolume();       
 368   1      }
 369          
 370          void HandleUsbReset()
 371          {
 372   1              // disable timer0 when usb_reset after usb_suspend.
 373   1              if(g_bmUsbResume == FALSE)
 374   1              {
 375   2                      TR0 = 0;
 376   2                      AnaCodecPowerReset();
 377   2              }
 378   1              
 379   1              usbEpReset();
 380   1              CodecReset();
 381   1      
 382   1              if(g_bmSpdifOutEn)
 383   1              {
 384   2                      SPDIF_FNUC_CTRL[1] |= bmBIT0;
 385   2                      SPDIF_FNUC_CTRL[1] &= ~bmBIT1;
 386   2              }
 387   1              else
 388   1              {
 389   2                      SPDIF_FNUC_CTRL[1] &= ~bmBIT0;
 390   2                      SPDIF_FNUC_CTRL[1] |= bmBIT1;
 391   2              }
 392   1              
 393   1              MemZero(g_bInputReport, MAX_HID_REPORT_SIZE);
 394   1                                      
 395   1              g_pControlTable->reset();       
 396   1      
 397   1              g_bmGpiRequest = FALSE;
 398   1      
 399   1              g_wOldGpiData = 0xFFFF;
 400   1              
 401   1              g_UsbCtrlState = NONE_STAGE;
 402   1              g_bConfiguration = 0;
 403   1      
 404   1              MemZero(g_bAlternateSetting, 4);
 405   1              
 406   1              volumeReset();
 407   1              
 408   1              REC_SRC_TEST_SETTING &= ~bmBIT2;        //bypass soft_mute
 409   1      }
 410          
 411          void HandleUsbSuspend()
 412          {
 413   1              if(UsbGetConfig() == 0)
 414   1                      return;
 415   1              
 416   1              if(g_bmUsbResume)
 417   1                      return;
 418   1              
 419   1              // EN_VAG, VMASTM
 420   1              InternSpiWriteByte(ANALOG_CODEC_CTRL_9, 
 421   1                      (InternSpiReadByte(ANALOG_CODEC_CTRL_9) & ~bmBIT0) | bmBIT3);
 422   1              // VMICM, VLNIM
 423   1              InternSpiWriteByte(ANALOG_CODEC_CTRL_1, 
 424   1                      InternSpiReadByte(ANALOG_CODEC_CTRL_1) | (bmBIT3 | bmBIT2));
 425   1      
 426   1              // GPIs need to be connected to pull-down resistances for power-saving when in suspend mode.
C51 COMPILER V9.02   MAIN                                                                  03/27/2015 10:38:53 PAGE 8   

 427   1              GpioPuPdSetting(g_wGpioDirMask, 0);
 428   1              
 429   1              // start timer0 to count down 3s for entering suspend status
 430   1              i_timercount = 0;
 431   1              TH0 = 0;
 432   1              TL0 = 0; 
 433   1              TR0 = 1;
 434   1      }
 435          
 436          void HandleUsbResume()
 437          {
 438   1              if(g_bmUsbResume)
 439   1                      return; 
 440   1      
 441   1              // disable timer0 to avoid entering usb_suspend
 442   1              TR0 = 0;
 443   1              
 444   1              AnaCodecPowerReset();
 445   1              
 446   1              // set EN_XLOCOM high
 447   1              InternSpiWriteByte(ANALOG_CODEC_CTRL_A, 
 448   1                      InternSpiReadByte(ANALOG_CODEC_CTRL_A) | bmBIT1);
 449   1              // VMASTM, EN_VAG, EN_VBG
 450   1              InternSpiWriteByte(ANALOG_CODEC_CTRL_9, 
 451   1                      (InternSpiReadByte(ANALOG_CODEC_CTRL_9) & ~bmBIT3) | (bmBIT1 | bmBIT0));
 452   1      
 453   1              GpioPuPdSetting(g_wGpioDirMask, 1);
 454   1      
 455   1              // start timer0 to end up pop-noise procedure 
 456   1              i_timercount = 0;
 457   1              g_bmUsbResume = TRUE;
 458   1              TH0 = 0;
 459   1              TL0 = 0;
 460   1              TR0 = 1;
 461   1      
 462   1              AdcCodecReset(FALSE, FALSE, FALSE, FALSE);
 463   1              DacCodecReset(FALSE, FALSE, FALSE, FALSE);
 464   1      }
 465          
 466          void main()
 467          {
 468   1              SP -=4;
 469   1      
 470   1              PowerOnReset();
 471   1      
 472   1              HubInSuspend();
 473   1      
 474   1              // Main Loop
 475   1              while(TRUE)
 476   1              {
 477   2                      if(g_bmUsbPuReset == TRUE)
 478   2                      {
 479   3                              if(UsbEventRst())
 480   3                              {
 481   4                                      UsbClrEventRst();
 482   4                                      AntiPopProcedure();
 483   4                                      HandleUsbReset();
 484   4                              }
 485   3                              
 486   3                              if(UsbEventSuspend())
 487   3                              {
 488   4                                      HandleUsbSuspend();     
C51 COMPILER V9.02   MAIN                                                                  03/27/2015 10:38:53 PAGE 9   

 489   4                                      UsbClrEventSuspend();
 490   4                              }
 491   3              
 492   3                              if(UsbEventResume())
 493   3                              {
 494   4                                      HandleUsbResume();
 495   4                                      UsbClrEventResume();
 496   4                              }
 497   3                                              
 498   3                              if(UsbEventEpCtrl())
 499   3                              {               
 500   4                                      UsbClrEventEpCtrl();    
 501   4                                      HandleUsbCtrlTransfer();        
 502   4                              }
 503   3                                              
 504   3                              if(UsbEventEpInt())
 505   3                              {
 506   4                                      HandleUsbIntTransfer();
 507   4                                      UsbClrEventEpInt();
 508   4                              }
 509   3              
 510   3                              if(g_bmGpiRequest == TRUE)
 511   3                              {       
 512   4                                      g_pControlTable->gpi(); 
 513   4                              }
 514   3              
 515   3                              g_pControlTable->event();
 516   3                      }
 517   2      
 518   2                      RefreshWdt();
 519   2              }
 520   1      }       


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1117    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     49       1
   IDATA SIZE       =      1    ----
   BIT SIZE         =      6    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
