C51 COMPILER V9.02   AUDIO                                                                 03/27/2015 10:38:51 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE AUDIO
OBJECT MODULE PLACED IN .\output\audio.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE audio.c OMF2 OPTIMIZE(9,SIZE) BROWSE INCDIR(..\..\CM65xxB-1\inc;.\inc) DEBU
                    -G OBJECT(.\output\audio.obj)

line level    source

   1          #include <intrins.h>
   2          #include "types.h"
   3          #include "registers.h"
   4          #include "config.h"
   5          #include "cm65xx.h"
   6          #include "audio.h"
   7          #include "usb.h"
   8          
   9          /*********************************************************************
  10          * External library variable declaration
  11          *********************************************************************/
  12          extern BYTE code g_bSamplingRateTbl[SAMPLING_RATE_NUM][5];
  13          
  14          /*********************************************************************
  15          * External library function
  16          *********************************************************************/
  17          extern void PlaybackMuteControl(BOOL analog, BOOL mute);
  18          extern void LED2_Switch(BOOL open);
  19          extern void SPDIFOutMuteSwitch(BOOL mute);
  20          extern void RecordMuteControl(BOOL analog, BOOL mute);
  21          extern void LED3_Switch(BOOL open);
  22          extern void MicInAaMuteControl(BOOL mute);
  23          extern void LineInAaMuteControl(BOOL mute);
  24          extern void SPDIFInMuteSwitch(BOOL mute);
  25          extern void PlaybackMinVolHandle(BOOL analog, BYTE ch);
  26          extern void PlaybackVolControl(BOOL analog, BYTE ch, BYTE vol);
  27          extern void RecordVolControl(BOOL analog, BOOL mic, BYTE ch, BYTE vol);
  28          extern void AApathVolControl(BOOL mic, BYTE ch, BYTE vol);
  29          extern void RecordfromSPDIF(BOOL en);
  30          extern void SelectRecPath(BYTE source);
  31          extern void SetPlaySampleRate(BYTE sr);
  32          extern void SetPlayBitResolution(BOOL bit16);
  33          extern void SetRecordSampleRate(BYTE sr);
  34          extern void SetRecordBitResolution(BOOL bit16);
  35          extern void RecordMonoEnable(BOOL mono);
  36          extern void C2MCopy(BYTE *dest, BYTE code *src, BYTE size);
  37          
  38          /*********************************************************************
  39          * Global/External variable definition
  40          *********************************************************************/
  41          BYTE g_bCurrentSelector, g_bCurrentMute, g_bAttribute;
  42          
  43          BYTE idata g_bCurrentVolume[MAX_FEATURE_VOL_NUM][2];
  44          BYTE idata g_bMinVolume[MAX_FEATURE_VOL_NUM];
  45          BYTE idata g_bCurrentSampleRate[2][3];
  46          
  47          extern BOOL g_bmSpdifOutEn;
  48          
  49          extern volatile BOOL g_bmUsbResume;
  50          
  51          extern BYTE g_bIndex;
  52          extern BYTE g_bTemp, g_bTempA, g_bTempB;
  53          extern BYTE *g_pbDataBuffer;
  54          extern BYTE g_bDataBuffer[MAX_BUFFER_SIZE];
C51 COMPILER V9.02   AUDIO                                                                 03/27/2015 10:38:51 PAGE 2   

  55          
  56          extern BYTE idata g_bAlternateSetting[4];
  57          
  58          extern WORD g_wDataOffset, g_wDataLength;
  59          
  60          extern AUDIO_CONTROL_STRUCT code *g_pAudioControl;
  61          extern USB_CONTROL_COMMAND_STRUCT g_UsbCtrlCmnd;
  62          
  63          /*********************************************************************
  64          * Global/External function definition
  65          *********************************************************************/
  66          void OriginFeatureVolume();
  67          void OriginFeatureMute();
  68          void OriginFeatureAgc();
  69          void OriginSetSelector();
  70          void OriginRecordMute();
  71          void OriginSetFrequency1();
  72          void OriginSetFrequency2();
  73          
  74          extern void OriginInitialize();
  75          extern void OriginReset();
  76          extern void OriginConfig();
  77          extern void OriginEvent();
  78          extern void OriginGpi();
  79          extern void OriginIr();
  80          
  81          /*********************************************************************
  82          * code area
  83          *********************************************************************/
  84          BYTE code g_bFeatureVolumeTbl[MAX_FEATURE_VOL_NUM * 2] = 
  85          {
  86                  0x00, 0xC2,             // for Play                     Max:0   Min:-62
  87                  0x0C, 0xE6,             // for Line                     Max:12  Min:-26
  88                  0x1E, 0x00,             // for Mic                      Max:30  Min:0
  89                  0x1E, 0x00,             // for Stero Mixer      Max:30  Min:0
  90                  0x0C, 0xE2,             // for AA-Line          Max:12  Min:-30
  91                  0x16, 0xF1,             // for AA-Mic           Max:22  Min:-15
  92          };
  93          
  94          // HeadSet
  95          #define T1_MAX_UNIT_NUM         8
  96          BYTE code OriginAcUnitTable1[T1_MAX_UNIT_NUM + 1] =
  97          {
  98                  AC_NODEF,
  99                  AC_IT,                  
 100                  AC_IT,
 101                  AC_OT, 
 102                  AC_OT,
 103                  (FEATURE_DAC << 4) | AC_FEATURE,        
 104                  (FEATURE_ADC_MIC << 4) | AC_FEATURE,
 105                  AC_NODEF,       
 106                  (1 << 4) | AC_SELECTOR
 107          };      
 108          
 109          AUDIO_CONTROL_STRUCT code OriginAudioControl1 =
 110          {
 111                  OriginFeatureVolume,
 112                  OriginFeatureMute,
 113                  OriginFeatureAgc,
 114                  OriginSetSelector,
 115                  OriginRecordMute,
 116                  OriginAcUnitTable1,
C51 COMPILER V9.02   AUDIO                                                                 03/27/2015 10:38:51 PAGE 3   

 117                  {{0x11, 0x01, OriginSetFrequency1}, 
 118                   {0x21, 0x82, OriginSetFrequency2}}
 119          };
 120          
 121          DEVICE_CONTROL_STRUCT code OriginDeviceControl1 =
 122          {
 123                  2, 3
 124          };      
 125          
 126          CONVERTIBLE_CONTROL_TABLE_STRUCT code g_OriginControlTable1 =
 127          {
 128                  &OriginDeviceControl1,
 129                  &OriginAudioControl1,   
 130                  OriginInitialize,
 131                  OriginReset,
 132                  OriginConfig,   
 133                  OriginEvent,
 134                  OriginGpi,
 135                  OriginIr
 136          };
 137          
 138          void freq2CtrlByte()
 139          {
 140   1              for(g_bIndex = 0; g_bIndex < SAMPLING_RATE_NUM; ++g_bIndex)
 141   1              {
 142   2                      if((g_pbDataBuffer[1] == g_bSamplingRateTbl[g_bIndex][1]) &&
 143   2                              (g_pbDataBuffer[2] == g_bSamplingRateTbl[g_bIndex][0]))
 144   2                              break;
 145   2              }
 146   1      
 147   1              if(g_bTempA)
 148   1              {
 149   2                      // handle spdif out sampling rate
 150   2                      if(g_bIndex == SAMPLING_RATE_NUM)       
 151   2                      {               
 152   3                              g_bTemp = CTRL_SPDIF_OUT_SAMPLING_RATE_NONE;
 153   3                      }
 154   2                      else
 155   2                      {
 156   3                              g_bTemp = g_bSamplingRateTbl[g_bIndex][4];
 157   3                      }       
 158   2              }
 159   1              else    
 160   1              {
 161   2                      if(SAMPLING_RATE_NUM == g_bIndex)
 162   2                      {
 163   3                              // If not found in the table, set 48KHz as default.
 164   3                              g_bIndex = 6;
 165   3                      }
 166   2              
 167   2                      g_bTemp = g_bSamplingRateTbl[g_bIndex][3];
 168   2              }       
 169   1      }
 170          
 171          void StartSpdifOut()
 172          {
 173   1              g_bTempA = 1;
 174   1              freq2CtrlByte();
 175   1              
 176   1              if(g_bTemp == CTRL_SPDIF_OUT_SAMPLING_RATE_NONE)
 177   1              {
 178   2                      SPDIFOutMuteSwitch(1);
C51 COMPILER V9.02   AUDIO                                                                 03/27/2015 10:38:51 PAGE 4   

 179   2              }
 180   1              else
 181   1              {
 182   2                      SPDIFOutMuteSwitch(0);
 183   2              }
 184   1      }       
 185          
 186          void OriginSetFrequency1()
 187          {               
 188   1              g_bTempA = 0;
 189   1              freq2CtrlByte();        // g_bTemp is assigned as a new frequency.
 190   1      
 191   1              SetPlaySampleRate(g_bTemp);
 192   1              
 193   1              g_bIndex = (HI_NIBBLE(g_bAttribute)) & (bmBIT1 | bmBIT0);
 194   1              if(g_bAlternateSetting[g_bIndex] == 2)
 195   1              {
 196   2                      SetPlayBitResolution(0);
 197   2              }
 198   1              else
 199   1              {
 200   2                      SetPlayBitResolution(1);
 201   2              }
 202   1      
 203   1              if(g_bmSpdifOutEn)
 204   1              {
 205   2                      StartSpdifOut();
 206   2              }
 207   1      }
 208          
 209          void OriginSetFrequency2()
 210          {
 211   1              g_bTempA = 0;
 212   1              freq2CtrlByte(); // g_bTemp is assigned as a new freqency.
 213   1      
 214   1              SetRecordSampleRate(g_bTemp);
 215   1              
 216   1              g_bIndex = (HI_NIBBLE(g_bAttribute)) & (bmBIT1 | bmBIT0);
 217   1              if(g_bAlternateSetting[g_bIndex] == 2)
 218   1              {
 219   2                      SetRecordBitResolution(0);
 220   2              }
 221   1              else
 222   1              {
 223   2                      SetRecordBitResolution(1);
 224   2              }
 225   1      
 226   1              // check if ADC is mono or not.
 227   1              RecordMonoEnable(g_bAttribute & bmBIT6);
 228   1      }       
 229          
 230          void OriginFeatureMute()
 231          {
 232   1              switch(g_bAttribute)
 233   1              {
 234   2                      case FEATURE_DAC:
 235   2                              if(g_bCurrentMute & (bmBIT0 << FEATURE_DAC))
 236   2                              {
 237   3                                      PlaybackMuteControl(1, 1);
 238   3                                      
 239   3                                      LED2_Switch(1);
 240   3      
C51 COMPILER V9.02   AUDIO                                                                 03/27/2015 10:38:51 PAGE 5   

 241   3                                      if(g_bmSpdifOutEn)
 242   3                                      {
 243   4                                              SPDIFOutMuteSwitch(1);
 244   4                                      }
 245   3                              }
 246   2                              else
 247   2                              {                               
 248   3                                      PlaybackMuteControl(1, 0);
 249   3                                      
 250   3                                      LED2_Switch(0);
 251   3      
 252   3                                      if(g_bmSpdifOutEn)
 253   3                                      {
 254   4                                              SPDIFOutMuteSwitch(0);
 255   4                                      }
 256   3                              }               
 257   2                              break;                  
 258   2                      
 259   2                      case FEATURE_ADC_MIC:
 260   2                      case FEATURE_ADC_LINE:
 261   2                      case FEATURE_MIXER:
 262   2                              if(g_bCurrentSelector == SELECTOR_SPDIF_IN)
 263   2                              {
 264   3                                      break;
 265   3                              }
 266   2                              else
 267   2                              {
 268   3                                      switch(g_bCurrentSelector)
 269   3                                      {
 270   4                                              case SELECTOR_MIC:
 271   4                                                      g_bTemp = FEATURE_ADC_MIC;
 272   4                                                      break;
 273   4      
 274   4                                              case SELECTOR_LINE_IN:
 275   4                                                      g_bTemp = FEATURE_ADC_LINE;
 276   4                                                      break;
 277   4      
 278   4                                              default:
 279   4                                                      g_bTemp = FEATURE_MIXER;
 280   4                                                      break;
 281   4                                      }
 282   3                              }
 283   2       
 284   2                              if(g_bCurrentMute & (bmBIT0 << g_bTemp))
 285   2                              {
 286   3                                      RecordMuteControl(1, 1);
 287   3                                      
 288   3                                      LED3_Switch(1);                                                         
 289   3                              }
 290   2                              else
 291   2                              {
 292   3                                      RecordMuteControl(1, 0);
 293   3                                      
 294   3                                      LED3_Switch(0);
 295   3                              }                                                       
 296   2                              break;
 297   2      
 298   2                      case FEATURE_MONITOR_MIC:
 299   2                              if(g_bCurrentMute & (bmBIT0 << FEATURE_MONITOR_MIC))
 300   2                              {
 301   3                                      MicInAaMuteControl(1);
 302   3                              }
C51 COMPILER V9.02   AUDIO                                                                 03/27/2015 10:38:51 PAGE 6   

 303   2                              else
 304   2                              {
 305   3                                      MicInAaMuteControl(0);
 306   3                              }
 307   2                              break;
 308   2                      
 309   2                      case FEATURE_MONITOR_LINE:
 310   2                              if(g_bCurrentMute & (bmBIT0 << FEATURE_MONITOR_LINE))
 311   2                              {
 312   3                                      LineInAaMuteControl(1);
 313   3                              }
 314   2                              else
 315   2                              {
 316   3                                      LineInAaMuteControl(0);
 317   3                              }
 318   2                              break;
 319   2                      
 320   2                      case FEATURE_SPDIF:
 321   2                              if(g_bCurrentSelector == SELECTOR_SPDIF_IN)
 322   2                              {
 323   3                                      if(g_bCurrentMute & (bmBIT0 << FEATURE_SPDIF))
 324   3                                      {
 325   4                                              SPDIFInMuteSwitch(1);
 326   4                                      }
 327   3                                      else
 328   3                                      {
 329   4                                              SPDIFInMuteSwitch(0);
 330   4                                      }
 331   3                              }
 332   2                              break;
 333   2                              
 334   2                      default:
 335   2                              break;
 336   2              }               
 337   1      }       
 338          
 339          void OriginFeatureVolume()
 340          {
 341   1              g_bTempB = HI_NIBBLE(g_bAttribute);
 342   1              
 343   1              switch(LO_NIBBLE(g_bAttribute))
 344   1              {
 345   2                      case FEATURE_DAC:               
 346   2                              if(((SBYTE)g_bCurrentVolume[FEATURE_DAC][g_bTempB]) <= ((SBYTE)g_bMinVolume[FEATURE_DAC]))
 347   2                              {
 348   3                                      g_bCurrentVolume[FEATURE_DAC][g_bTempB] = g_bMinVolume[FEATURE_DAC];
 349   3                                      
 350   3                                      PlaybackMinVolHandle(1, g_bTempB);
 351   3                              }
 352   2                              else
 353   2                              {       
 354   3                                      PlaybackVolControl(1, g_bTempB, g_bCurrentVolume[FEATURE_DAC][g_bTempB]);
 355   3                              }
 356   2                              break;
 357   2                      
 358   2                      case FEATURE_ADC_MIC:
 359   2                      case FEATURE_ADC_LINE:
 360   2                      case FEATURE_MIXER:
 361   2                              if(g_bCurrentSelector == SELECTOR_SPDIF_IN)
 362   2                              {
 363   3                                      break;
 364   3                              }
C51 COMPILER V9.02   AUDIO                                                                 03/27/2015 10:38:51 PAGE 7   

 365   2                              else
 366   2                              {
 367   3                                      switch(g_bCurrentSelector)
 368   3                                      {
 369   4                                              case SELECTOR_MIC:
 370   4                                                      g_bTemp = FEATURE_ADC_MIC;
 371   4                                                      break;
 372   4      
 373   4                                              case SELECTOR_LINE_IN:
 374   4                                                      g_bTemp = FEATURE_ADC_LINE;
 375   4                                                      break;
 376   4      
 377   4                                              default:
 378   4                                                      g_bTemp = FEATURE_MIXER;
 379   4                                                      break;
 380   4                                      }
 381   3                              }
 382   2                              
 383   2                              if(((SBYTE)g_bCurrentVolume[g_bTemp][g_bTempB]) < ((SBYTE)g_bMinVolume[g_bTemp]))
 384   2                              {
 385   3                                      g_bCurrentVolume[g_bTemp][g_bTempB] = g_bMinVolume[g_bTemp];
 386   3                              }       
 387   2                                      
 388   2                              if((g_bTemp == FEATURE_ADC_MIC) || (g_bTemp == FEATURE_MIXER))
 389   2                              {
 390   3                                              RecordVolControl(1, 1, g_bTempB, g_bCurrentVolume[g_bTemp][g_bTempB]);
 391   3                              }
 392   2                              else
 393   2                              {
 394   3                                              RecordVolControl(1, 0, g_bTempB, g_bCurrentVolume[g_bTemp][g_bTempB]);
 395   3                              }
 396   2                              break;  
 397   2                                                      
 398   2                      case FEATURE_MONITOR_MIC:
 399   2                              if(((SBYTE)g_bCurrentVolume[FEATURE_MONITOR_MIC][g_bTempB]) < ((SBYTE)g_bMinVolume[FEATURE_MONITOR_MIC]
             -))
 400   2                              {
 401   3                                      g_bCurrentVolume[FEATURE_MONITOR_MIC][g_bTempB] = g_bMinVolume[FEATURE_MONITOR_MIC];
 402   3                              }
 403   2                              
 404   2                              AApathVolControl(1, g_bTempB, g_bCurrentVolume[FEATURE_MONITOR_MIC][g_bTempB]);
 405   2                              break;
 406   2                        
 407   2                      case FEATURE_MONITOR_LINE:
 408   2                              if(((SBYTE)g_bCurrentVolume[FEATURE_MONITOR_LINE][g_bTempB]) < ((SBYTE)g_bMinVolume[FEATURE_MONITOR_LIN
             -E]))
 409   2                              {
 410   3                                      g_bCurrentVolume[FEATURE_MONITOR_LINE][g_bTempB] = g_bMinVolume[FEATURE_MONITOR_LINE];
 411   3                              }
 412   2                              
 413   2                              AApathVolControl(0, g_bTempB, g_bCurrentVolume[FEATURE_MONITOR_MIC][g_bTempB]);
 414   2                              break;
 415   2                                                                      
 416   2                      default:
 417   2                              break;
 418   2              }
 419   1      }       
 420          
 421          void OriginFeatureAgc()
 422          {                       
 423   1      }
 424          
C51 COMPILER V9.02   AUDIO                                                                 03/27/2015 10:38:51 PAGE 8   

 425          void OriginSetSelector()
 426          {
 427   1              switch(g_bCurrentSelector)
 428   1              {
 429   2                      case SELECTOR_MIC:
 430   2                              // source switch
 431   2                              SelectRecPath(SELECTOR_MIC);
 432   2                              // update volume
 433   2                              RecordVolControl(1, 1, 0, g_bCurrentVolume[FEATURE_ADC_MIC][0]);
 434   2                              RecordVolControl(1, 1, 1, g_bCurrentVolume[FEATURE_ADC_MIC][1]);
 435   2                              // update mute status
 436   2                              if(g_bCurrentMute & (bmBIT0 << FEATURE_ADC_MIC))
 437   2                              {
 438   3                                      RecordMuteControl(1, 1);
 439   3                              }
 440   2                              else
 441   2                              {
 442   3                                      RecordMuteControl(1, 0);
 443   3                              }
 444   2                              
 445   2                              RecordfromSPDIF(0);
 446   2                              break;
 447   2                      
 448   2                      case SELECTOR_LINE_IN:
 449   2                              // source switch
 450   2                              SelectRecPath(SELECTOR_LINE_IN);
 451   2                              // update volume
 452   2                              RecordVolControl(1, 0, 0, g_bCurrentVolume[FEATURE_ADC_LINE][0]);
 453   2                              RecordVolControl(1, 0, 1, g_bCurrentVolume[FEATURE_ADC_LINE][1]);
 454   2                              // update mute status
 455   2                              if(g_bCurrentMute & (bmBIT0 << FEATURE_ADC_LINE))
 456   2                              {
 457   3                                      RecordMuteControl(1, 1);
 458   3                              }
 459   2                              else
 460   2                              {
 461   3                                      RecordMuteControl(1, 0);
 462   3                              }
 463   2      
 464   2                              RecordfromSPDIF(0);
 465   2                              break;
 466   2                        
 467   2                      case SELECTOR_SMIX_IN:
 468   2                              // source switch
 469   2                              SelectRecPath(SELECTOR_SMIX_IN);
 470   2                              // update volume
 471   2                              RecordVolControl(1, 1, 0, g_bCurrentVolume[FEATURE_MIXER][0]);
 472   2                              RecordVolControl(1, 1, 1, g_bCurrentVolume[FEATURE_MIXER][1]);
 473   2                              // update mute status
 474   2                              if(g_bCurrentMute & (bmBIT0 << FEATURE_MIXER))
 475   2                              {
 476   3                                      RecordMuteControl(1, 1);
 477   3                              }
 478   2                              else
 479   2                              {
 480   3                                      RecordMuteControl(1, 0);
 481   3                              }
 482   2                              
 483   2                              RecordfromSPDIF(0);
 484   2                              break;
 485   2                      
 486   2                      case SELECTOR_SPDIF_IN:
C51 COMPILER V9.02   AUDIO                                                                 03/27/2015 10:38:51 PAGE 9   

 487   2                              // source switch
 488   2                              RecordfromSPDIF(1);
 489   2                              // update mute status
 490   2                              if(g_bCurrentMute & (bmBIT0 << FEATURE_SPDIF))
 491   2                              {
 492   3                                      SPDIFInMuteSwitch(1);
 493   3                              }
 494   2                              else
 495   2                              {
 496   3                                      SPDIFInMuteSwitch(0);
 497   3                              }
 498   2                              break;
 499   2                      
 500   2                      default:
 501   2                              break;  
 502   2              }       
 503   1      }       
 504          
 505          void OriginRecordMute()
 506          {
 507   1              if(g_bCurrentSelector == SELECTOR_SPDIF_IN)
 508   1              {
 509   2                      if(g_bCurrentMute & (bmBIT0 << FEATURE_SPDIF))
 510   2                      {
 511   3                              g_bCurrentMute &= ~(bmBIT0 << FEATURE_SPDIF);
 512   3                              SPDIFInMuteSwitch(0);
 513   3                              LED3_Switch(0);
 514   3                      }
 515   2                      else
 516   2                      {
 517   3                              g_bCurrentMute |= (bmBIT0 << FEATURE_SPDIF);
 518   3                              SPDIFInMuteSwitch(1);
 519   3                              LED3_Switch(1);
 520   3                      }
 521   2              }
 522   1              else
 523   1              {
 524   2                      switch(g_bCurrentSelector)
 525   2                      {
 526   3                              case SELECTOR_MIC:
 527   3                                      g_bTemp = (bmBIT0 << FEATURE_ADC_MIC);
 528   3                                      break;
 529   3                      
 530   3                              case SELECTOR_LINE_IN:
 531   3                                      g_bTemp = (bmBIT0 << FEATURE_ADC_LINE);
 532   3                                      break;  
 533   3                      
 534   3                              case SELECTOR_SMIX_IN:
 535   3                                      g_bTemp = (bmBIT0 << FEATURE_MIXER);
 536   3                                      break;
 537   3                                      
 538   3                              default:
 539   3                                       return;        
 540   3                      }
 541   2              
 542   2                      if(g_bCurrentMute & g_bTemp)
 543   2                      {
 544   3                              g_bCurrentMute &= ~g_bTemp;
 545   3                      
 546   3                              RecordMuteControl(1, 0);
 547   3                      
 548   3                              LED3_Switch(0);
C51 COMPILER V9.02   AUDIO                                                                 03/27/2015 10:38:51 PAGE 10  

 549   3                      }
 550   2                      else
 551   2                      {
 552   3                              g_bCurrentMute |= g_bTemp;
 553   3                      
 554   3                              RecordMuteControl(1, 1);
 555   3                      
 556   3                              LED3_Switch(1);                         
 557   3                      }
 558   2              }
 559   1      }       
 560          
 561          BOOL tackleSelector(BOOL dataStage)
 562          {
 563   1              if(g_UsbCtrlCmnd.bmRequestType & bmBIT7)        // Device to Host
 564   1              {               
 565   2                      switch(g_UsbCtrlCmnd.bRequest)
 566   2                      {
 567   3                              case CMD_GET_CURRENT:
 568   3                                      g_bDataBuffer[0] = g_bCurrentSelector;
 569   3                                break;
 570   3                                
 571   3                              case CMD_GET_MIN:
 572   3                                      g_bDataBuffer[0] = 1;
 573   3                                break;        
 574   3                                      
 575   3                              case CMD_GET_MAX:
 576   3                                      g_bDataBuffer[0] = g_bAttribute;
 577   3                                break;
 578   3                              
 579   3                              case CMD_GET_RES:
 580   3                                      g_bDataBuffer[0] = 1;
 581   3                                break;        
 582   3                              
 583   3                              default:
 584   3                                      return FALSE;   
 585   3                      }       
 586   2                      
 587   2                      g_wDataLength = 1;
 588   2                      g_pbDataBuffer = g_bDataBuffer;                 
 589   2              }
 590   1              else
 591   1              {
 592   2                      if(g_UsbCtrlCmnd.bRequest == CMD_SET_CURRENT)
 593   2                      {
 594   3                              if(dataStage == FALSE)
 595   3                              {
 596   4                                      g_wDataLength = 1;
 597   4                                      g_pbDataBuffer = &g_bCurrentSelector;
 598   4                              }
 599   3                              else
 600   3                              {
 601   4                                      g_pAudioControl->setSelector(); 
 602   4                              }
 603   3                      }                                               
 604   2              }       
 605   1              
 606   1              return TRUE;
 607   1      }
 608          
 609          BOOL tackleFeatureVolume(BOOL dataStage)
 610          {
C51 COMPILER V9.02   AUDIO                                                                 03/27/2015 10:38:51 PAGE 11  

 611   1              if(g_UsbCtrlCmnd.bmRequestType & bmBIT7)        // Device to Host
 612   1              {       
 613   2                      switch(g_UsbCtrlCmnd.bRequest)
 614   2                      {
 615   3                              case CMD_GET_CURRENT:
 616   3                                      g_bTemp = LSB(g_UsbCtrlCmnd.wValue) - 1;                                
 617   3                                      g_bDataBuffer[0] = 0x00;
 618   3                                      g_bDataBuffer[1] = g_bCurrentVolume[g_bAttribute][g_bTemp];
 619   3                                break;
 620   3                                
 621   3                              case CMD_GET_MIN:                                                       
 622   3                              case CMD_GET_MAX:                       
 623   3                                      C2MCopy(g_bDataBuffer, g_bFeatureVolumeTbl + (g_bAttribute * 2), 2);
 624   3                                      
 625   3                                      if(g_UsbCtrlCmnd.bRequest == CMD_GET_MAX)
 626   3                                      {
 627   4                                              g_bDataBuffer[1] = g_bDataBuffer[0];
 628   4                                      }
 629   3                                      g_bDataBuffer[0] = 0x00;
 630   3                                break;
 631   3                                      
 632   3                              case CMD_GET_RES:
 633   3                                      g_bDataBuffer[0] = 0x00;        
 634   3                                      g_bDataBuffer[1] = 0x01;
 635   3                                break;
 636   3                              
 637   3                              default:
 638   3                                return FALSE;         
 639   3                      }
 640   2                      
 641   2                      g_wDataLength = 2;
 642   2                      g_pbDataBuffer = g_bDataBuffer;
 643   2              }
 644   1              else
 645   1              {
 646   2                      if(g_UsbCtrlCmnd.bRequest == CMD_SET_CURRENT)
 647   2                      {
 648   3                              if(dataStage == FALSE)
 649   3                              {
 650   4                                      g_wDataLength = 2;
 651   4                                      g_pbDataBuffer = g_bDataBuffer;
 652   4                              }
 653   3                              else
 654   3                              {       
 655   4                                      g_bTemp = LSB(g_UsbCtrlCmnd.wValue) - 1;                                
 656   4                                      
 657   4                                      if(g_bDataBuffer[0] & bmBIT7)   // because of 1dB resolution, volume adjustment is needed.
 658   4                                      {
 659   5                                              g_bCurrentVolume[g_bAttribute][g_bTemp] = g_bDataBuffer[1] + 1;
 660   5                                      }
 661   4                                      else
 662   4                                      {
 663   5                                              g_bCurrentVolume[g_bAttribute][g_bTemp] = g_bDataBuffer[1];
 664   5                                      }
 665   4                                      
 666   4                                      if(g_bTemp)
 667   4                                      {
 668   5                                              g_bAttribute |= bmBIT4;
 669   5                                      }
 670   4      
 671   4                                      g_pAudioControl->featureVolume();                                                       
 672   4                              }
C51 COMPILER V9.02   AUDIO                                                                 03/27/2015 10:38:51 PAGE 12  

 673   3                      }
 674   2                      else
 675   2                      {
 676   3                              return FALSE;                           
 677   3                      }
 678   2              }       
 679   1      
 680   1              return TRUE;
 681   1      }       
 682          
 683          BOOL tackleFeatureMute(BOOL dataStage)
 684          {
 685   1              if(g_UsbCtrlCmnd.bmRequestType & bmBIT7)        // Device to Host
 686   1              {       
 687   2                      if(g_UsbCtrlCmnd.bRequest == CMD_GET_CURRENT)
 688   2                      {
 689   3                              g_bDataBuffer[0] = (g_bCurrentMute >> g_bAttribute) & bmBIT0;
 690   3                              g_wDataLength = 1;
 691   3                              g_pbDataBuffer = g_bDataBuffer;         
 692   3                      }
 693   2                      else
 694   2                      {
 695   3                              return FALSE;                   
 696   3                      }
 697   2              }
 698   1              else
 699   1              {
 700   2                      if(g_UsbCtrlCmnd.bRequest == CMD_SET_CURRENT)
 701   2                      {
 702   3                              if(dataStage == FALSE)
 703   3                              {
 704   4                                      g_wDataLength = 1;
 705   4                                      g_pbDataBuffer = g_bDataBuffer;                         
 706   4                              }
 707   3                              else
 708   3                              {
 709   4                                      if(g_bDataBuffer[0])
 710   4                                      {
 711   5                                              g_bCurrentMute |= (bmBIT0 << g_bAttribute);
 712   5                                      }
 713   4                                      else
 714   4                                      {
 715   5                                              g_bCurrentMute &= (~(bmBIT0 << g_bAttribute));
 716   5                                      }               
 717   4      
 718   4                                      // for anti-pop noise
 719   4                                      if((g_bAttribute == FEATURE_MONITOR_MIC) || (g_bAttribute == FEATURE_MONITOR_LINE))
 720   4                                      {
 721   5                                              if(g_bmUsbResume)
 722   5                                                      return TRUE;
 723   5                                      }
 724   4                                      
 725   4                                      g_pAudioControl->featureMute();
 726   4                              }
 727   3                      }
 728   2                      else
 729   2                      {
 730   3                              return FALSE;                   
 731   3                      }
 732   2              }               
 733   1              
 734   1              return TRUE;    
C51 COMPILER V9.02   AUDIO                                                                 03/27/2015 10:38:51 PAGE 13  

 735   1      }
 736          
 737          BOOL TackleAudioControl(BOOL dataStage)
 738          {
 739   1              g_bTemp = LO_NIBBLE(g_pAudioControl->pAcUnitTable[MSB(g_UsbCtrlCmnd.wIndex)]);
 740   1              g_bAttribute = HI_NIBBLE(g_pAudioControl->pAcUnitTable[MSB(g_UsbCtrlCmnd.wIndex)]);
 741   1                      
 742   1              switch(g_bTemp)
 743   1              {
 744   2                      case AC_FEATURE:
 745   2                              switch(MSB(g_UsbCtrlCmnd.wValue))
 746   2                              {
 747   3                                      case MUTE_CONTROL:
 748   3                                              return (tackleFeatureMute(dataStage));
 749   3                                              break;
 750   3                                              
 751   3                                      case VOLUME_CONTROL:
 752   3                                              return (tackleFeatureVolume(dataStage));
 753   3                                              break;
 754   3                                              
 755   3                                      case BASS_CONTROL:
 756   3                                      case TREBLE_CONTROL:
 757   3                                              break;
 758   3                                              
 759   3                                      case AUTOMATIC_GAIN_CONTROL:
 760   3                                              break;
 761   3                                              
 762   3                                      default:
 763   3                                              break;
 764   3                              }
 765   2                        break;
 766   2                        
 767   2                      case AC_SELECTOR:
 768   2                              return (tackleSelector(dataStage));
 769   2                              break;
 770   2      
 771   2                      case AC_MIXER:
 772   2                              break;
 773   2                      
 774   2                      case AC_IT:
 775   2                              break;
 776   2              }               
 777   1              
 778   1              return FALSE;
 779   1      }       
 780          
 781          BOOL TackleAudioStream(BOOL dataStage)
 782          {
 783   1              if(MSB(g_UsbCtrlCmnd.wValue) == SAMPLING_FREQ_CONTROL)
 784   1              {
 785   2                      for(g_bIndex = 0; g_bIndex < 2; g_bIndex++)
 786   2                      {
 787   3                              if(LSB(g_UsbCtrlCmnd.wIndex) == g_pAudioControl->asControl[g_bIndex].endpoint)
 788   3                                      break;
 789   3                      }
 790   2                      if(g_bIndex == 2)
 791   2                      {
 792   3                              return FALSE;
 793   3                      }
 794   2      
 795   2                      if((LSB(g_UsbCtrlCmnd.wIndex)) & bmBIT7)
 796   2                      {
C51 COMPILER V9.02   AUDIO                                                                 03/27/2015 10:38:51 PAGE 14  

 797   3                              g_bTemp = 1;    
 798   3                      }       
 799   2                      else
 800   2                      {
 801   3                              g_bTemp = 0;
 802   3                      }
 803   2                                      
 804   2                      if(g_UsbCtrlCmnd.bmRequestType & bmBIT7)        // Device to Host
 805   2                      {
 806   3                              g_wDataLength = 3;
 807   3                              switch(g_UsbCtrlCmnd.bRequest)
 808   3                              {
 809   4                                      case CMD_GET_CURRENT:
 810   4                                              g_bDataBuffer[0] = g_bCurrentSampleRate[g_bTemp][0];
 811   4                                              g_bDataBuffer[1] = g_bCurrentSampleRate[g_bTemp][1];
 812   4                                              g_bDataBuffer[2] = g_bCurrentSampleRate[g_bTemp][2];
 813   4                                              break;
 814   4                                
 815   4                                      case CMD_GET_MIN:
 816   4                                              g_bDataBuffer[0] = g_bSamplingRateTbl[0][2];
 817   4                                              g_bDataBuffer[1] = g_bSamplingRateTbl[0][1];
 818   4                                              g_bDataBuffer[2] = g_bSamplingRateTbl[0][0];
 819   4                                              break;
 820   4                                      
 821   4                                      case CMD_GET_MAX:
 822   4                                              g_bDataBuffer[0] = g_bSamplingRateTbl[SAMPLING_RATE_NUM - 1][2];
 823   4                                              g_bDataBuffer[1] = g_bSamplingRateTbl[SAMPLING_RATE_NUM - 1][1];
 824   4                                              g_bDataBuffer[2] = g_bSamplingRateTbl[SAMPLING_RATE_NUM - 1][0];
 825   4                                              break;
 826   4                                      
 827   4                                      case CMD_GET_RES:
 828   4                                              g_bDataBuffer[0] = 0x05;
 829   4                                              g_bDataBuffer[1] = 0x00;
 830   4                                              g_bDataBuffer[2] = 0x00;
 831   4                                              break;
 832   4                              
 833   4                                      default:
 834   4                                              return FALSE;
 835   4                                              break;
 836   4                              }
 837   3                              g_pbDataBuffer = g_bDataBuffer;
 838   3                      }
 839   2                      else
 840   2                      {
 841   3                              if(g_UsbCtrlCmnd.bRequest == CMD_SET_CURRENT)           
 842   3                              {
 843   4                                      if(dataStage == FALSE)
 844   4                                      {
 845   5                                              g_wDataLength = 3;
 846   5                                              g_pbDataBuffer = g_bCurrentSampleRate[g_bTemp];
 847   5                                      }
 848   4                                      else    
 849   4                                      {
 850   5                                              g_bAttribute = g_pAudioControl->asControl[g_bIndex].attribute;
 851   5                                              g_pAudioControl->asControl[g_bIndex].setFrequency();                                    
 852   5                                      }
 853   4                              }
 854   3                              else
 855   3                              {
 856   4                                      return FALSE;   
 857   4                              }
 858   3                      }       
C51 COMPILER V9.02   AUDIO                                                                 03/27/2015 10:38:51 PAGE 15  

 859   2              }       
 860   1                      
 861   1              return TRUE;
 862   1      }       
 863          
 864          BOOL TackleSetAudioInterface()
 865          {
 866   1              g_bIndex = (LSB(g_UsbCtrlCmnd.wIndex));
 867   1              
 868   1              g_bTemp = g_pAudioControl->asControl[g_bIndex - 1].attribute;   
 869   1              if(g_bTemp & bmBIT7)            // invalid
 870   1              {
 871   2                      return FALSE; 
 872   2              }
 873   1              
 874   1              if((LSB(g_UsbCtrlCmnd.wValue)) > (LO_NIBBLE(g_bTemp)))
 875   1              {
 876   2                      return FALSE; 
 877   2              }
 878   1              
 879   1              g_bTemp = ((g_pAudioControl->asControl[g_bIndex - 1].endpoint) & bmBIT7);
 880   1              if((LSB(g_UsbCtrlCmnd.wValue)) == 0)
 881   1              {
 882   2                      if(g_bTemp == 0)
 883   2                      {
 884   3                              UsbSelectEp(ENDPOINT_ISO_OUT);
 885   3                              UsbStopEp();
 886   3                      }
 887   2                      else
 888   2                      {
 889   3                              UsbSelectEp(ENDPOINT_ISO_IN);
 890   3                              UsbStopEp();
 891   3                      }
 892   2              }
 893   1              else
 894   1              {
 895   2                      if(g_bTemp == 0)
 896   2                      {
 897   3                              UsbSelectEp(ENDPOINT_ISO_OUT);
 898   3                              UsbStartEp();
 899   3                      }
 900   2                      else
 901   2                      {
 902   3                              UsbSelectEp(ENDPOINT_ISO_IN);
 903   3                              UsbStartEp();
 904   3                      }
 905   2              }
 906   1      
 907   1              UsbSelectEp(ENDPOINT_CTRL);
 908   1              
 909   1              return TRUE;
 910   1      }
 911          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1788    ----
   CONSTANT SIZE    =     72    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =     24    ----
C51 COMPILER V9.02   AUDIO                                                                 03/27/2015 10:38:51 PAGE 16  

   BIT SIZE         =   ----       5
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
